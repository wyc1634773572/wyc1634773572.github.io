<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[C++基础]virtual</title>
    <link href="/2024/12/19/virtual/"/>
    <url>/2024/12/19/virtual/</url>
    
    <content type="html"><![CDATA[<h1 id="virtual"><a href="#virtual" class="headerlink" title="virtual"></a>virtual</h1><p><strong>virtual用于修饰：成员函数（虚函数），继承方式（虚继承）</strong></p><ol><li><font size=3 color=yellow>修饰成员函数</font></li></ol><ul><li>定义虚函数与纯虚函数，实现多态  <ul><li><font color=red>父类指针指向子类对象，此时必须用到virtual来实现多态。</font>父类中定义虚函数，在子类中对该函数进行重写，此时父类指针调用时则会根据具体指向的子类对象来调用相应函数。当然，如果子类没有重写父类虚函数，则任然调用父类虚函数。虚函数相当于为子类提供一个了缺省实现，而纯虚函数则是必须由子类实现。  </li><li>父类中设置为virtual后子类中的同名函数均已经是为virtual，可不再添加修饰符。  </li><li>必须注意需要将父类析构函数设为虚函数，否则在释放父类指针时将不会调用到子类析构，这很危险。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-built_in">A</span>()&#123;cout&lt;&lt;<span class="hljs-string">&quot;calss A create&quot;</span>&lt;&lt;endl;&#125;<br>~<span class="hljs-built_in">A</span>()&#123;cout&lt;&lt;<span class="hljs-string">&quot;calss A destroy&quot;</span>&lt;&lt;endl;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> : <span class="hljs-keyword">public</span> A&#123;<br><span class="hljs-built_in">B</span>()&#123;cout&lt;&lt;<span class="hljs-string">&quot;calss B create&quot;</span>&lt;&lt;endl;&#125;<br>~<span class="hljs-built_in">B</span>()&#123;cout&lt;&lt;<span class="hljs-string">&quot;calss A destroy&quot;</span>&lt;&lt;endl;&#125;<br>&#125;<br><span class="hljs-comment">//调用</span><br>A* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">B</span>();<br><span class="hljs-keyword">delete</span> a;<br><span class="hljs-comment">//调用结果</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> create<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> create<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> destroy<span class="hljs-comment">//直接调用到父类析构，子类被跳过</span><br></code></pre></td></tr></table></figure><ul><li>当类中含有虚函数时（无论是自己的还是继承来的），<strong>编译器</strong>就会为每个类添加一个虚函数表，并用一个隐藏的虚表指针指向虚表（可以用sizeof看到，拥有虚函数的类对象会多出4字节的长度，就是这个虚表指针）。</li></ul><p>Question：为什么virtua不能修饰static静态成员函数？<br>通过上面的解释，我们可以看出一个类对象要调用虚函数需要：先找到类对象的this指针访问到虚表指针，通过虚表指针找到虚函数才能调用，static成员函数没有this指针，也就不能调用到虚函数。因此，这两个修饰符不能用在一起。</p><p>Question：析构函数能设为虚函数，那构造函数不能设为虚函数？<br>不能，虚函数调用需要用到this指针，this指针又是在构造函数中创建的，如果构造函数设为虚函数，谁来创造this并调用构造?</p><ol start="2"><li>修饰继承方式<br>用于解决菱形继承二义性。</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>static</tag>
      
      <tag>virtual</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[C++基础]const</title>
    <link href="/2024/12/19/const/"/>
    <url>/2024/12/19/const/</url>
    
    <content type="html"><![CDATA[<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p><strong>const修饰分为：修饰指针，修饰参数，修饰成员函数</strong></p><ol><li><font size=3 color=yellow>修饰指针</font><br>这种情况一般要注意的是常量指针与指针常量：</li></ol><ul><li><p>常量指针，本质是个指针，指向一个常量：<br>const int * a   ——–&gt;  const  (int *a)  修饰的是 *a 即a指针指向地址中的内容&#x2F;值不可变    </p></li><li><p>指针常量，本质是个常量：<br>int * const a   ——–&gt;  (int * const) a  修饰的是 a 即a指针指向的地址不可变  </p></li><li><p><font color=red>const在前值不变，const在后址不变。</font><br>这里的前后指的是相对于  * 。</p></li></ul><ol start="2"><li><font size=3 color=yellow>修饰参数</font><br>const修饰参数，意指该函数不会改变该参数。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">const</span> A&amp; a)</span></span>; <span class="hljs-comment">//const保护A类对象的成员不被改变，引用传递是为了避免拷贝，提高效率。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> a)</span></span>; <span class="hljs-comment">//无意义，这里是值传递方式，无论使用const与否，形参本就无法改变实参</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> * <span class="hljs-type">const</span> a)</span></span>; <span class="hljs-comment">//传入指针常量，无法改变形参指向地址，但能修改所指内容，无法保护a的内容。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> * a)</span></span>; <span class="hljs-comment">//可保护a的内容不被改变</span><br></code></pre></td></tr></table></figure><p>这里简单提一下值传递、指针传递、以及引用传递的区别：  </p><ul><li>值传递为实参拷贝一个副本，即形参传递到函数中，任何对形参的修改都不会改变实参；  </li><li>指针传递本质上也是值传递，不过指针作为参数，传递的是指针的值，即地址。也就是说重新生成了一个形参指针，这个指针与实参指针指向同一片内存。这样一来，虽然改变形参无法改变实参指向的地址，却可以通过形参指针改变实参指针指向的地址中的内容。  </li><li>引用传递则是完全传入的是一个实参。</li></ul><ol start="3"><li><font size=3 color=yellow>修饰成员函数</font></li></ol><ul><li><p>写法：const写在成员函数最后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>const修饰成员函数后，该成员函数无法对成员变量进行修改；<br> 写在这里的意义是修饰了成员函数中隐藏的this指针：A * const  this   ——&gt;const A * const this<br> 可以看出const 修饰的是 *this 即this所指向的类对象。那么类对象中的内容（成员）就无法被改变了。 </p></li><li><p>const成员函数不能调用非const成员函数；  </p></li><li><p>任何不修改成员变量的的成员函数都应该设为const；</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>const</tag>
      
      <tag>参数传递</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[C++基础]static</title>
    <link href="/2024/12/18/static/"/>
    <url>/2024/12/18/static/</url>
    
    <content type="html"><![CDATA[<h1 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h1><p>static用于控制存储方式以及可见性，总的来说他的修饰可分为两大类<br><strong>普通修饰：局部变量、全局变量、函数</strong><br><strong>成员修饰：成员变量、成员函数</strong>  </p><ol><li><font size=3 color=yellow>修饰局部变量。</font></li></ol><ul><li>我们知道局部变量的生命周期就在其所定义的那个局部范围内，如某个函数，某个循环，一旦走出这个范围局部变量将自动释放。static修饰局部变量时，将改变变量的生命周期，实际上就是将其存储区域由原来的栈区移至静态区，使其<strong>生命周期与程序一样长</strong>。但是，它的<strong>作用域并没有被改变</strong>，任然只能在局部的方位内使用。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>a++;<br>cout&lt;&lt;a&lt;&lt;endl;<br>&#125;<br>调用两次func,得到的结果分别是<span class="hljs-number">1</span>、<span class="hljs-number">2</span>。说明出了作用域之后a的生命周期并没有结束<br></code></pre></td></tr></table></figure><ol start="2"><li><font size=3 color=yellow>修饰全局变量与函数</font></li></ol><ul><li>static修饰全局变量与函数呈现的效果是一样的，即<strong>改变了修饰对象的作用域</strong>（由整个程序到当前文件），只能在定义它的源文件内使用。</li></ul><ol start="3"><li><font size=3 color=yellow>修饰成员变量  </font></li></ol><ul><li><p>静态成员变量由于存储在静态区,在程序开始时就必须存在，因而有不能在类中定义，只初始化一次（默认为0）等特点。  </p></li><li><p>因为存储在静态区内，<strong>相当于一个全局变量</strong>，为所有类对象共有(相当于实现了类对象的数据共享)，但并没有包含在具体的类对象中，<font color=red>因此多添加一个静态成员不会影响sizeof()对类对象的计算值大小。</font>  </p></li><li><p>static修饰成员变量，必须初始化，必须在类外初始化，且不能再加static</p></li><li><p>访问方式：类名：：静态成员变量名、类对象名 . 静态成员变量名</p></li></ul><ol start="4"><li><font size=3 color=yellow>修饰成员函数</font></li></ol><ul><li>静态成员函数不能访问非静态成员.也不能被const修饰  <ul><li><p>为什么静态成员函数只能访问静态成员?<br>因为<font color=red><strong>静态成员函数没有this指针</strong></font>,试想,一个成员函数是通过this指针来确定当前类对象的,这样才能找到类对象中的成员.可是如果没有这个指针,函数就找不到这些普通成员,也就无从调用了。  </p></li><li><p>那么为什么会没有this指针呢?我们从内存上来想想,因为static将成员存储在了静态区,在类加载时就会分配内存,这个过程在类对象创建之前,this是指向类对象的那么其创建过程也应该在这之后,所以静态函数存在时是没有this指针的。当然简单点来说，**<font color=red>静态成员是属于类而不是专属某个类对象的</font>**，因此不该拥有this来将它的作用范围限定在类对象中。  </p></li><li><p>通过上面的解释也能很好理解了，为什么静态成员函数不能被const修饰，以及为什么非静态成员函数能调用静态成员。const修饰成员函数的实质其实是修饰函数的隐藏参数this,准确来说是A * const this,既然静态成员函数没有this,也就没有办法用const修饰了。而静态成员函数被所有类对象共享,那么类对象的非静态成员函数自然能调用静态成员。请注意理解“不属于类对象，但被类对象所共享”。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>const</tag>
      
      <tag>static</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
